import  java.util.LinkedList;
import java.util.Queue;

class StackUsingQueueLL {
    // ใช้ linkeadlist ในการสร้าง queue สองตัว
    private  Queue<Integer> q1 = new LinkedList<>();
    private  Queue<Integer> q2 = new LinkedList<>();
    
    // เมธอดสำหรับใส่ข้อมูลลงใน Stack
    public void push(int x) {
        // ใส่ข้อมูลใหม่ลงใน q2
        q2.add(x);
        
        // ย้ายข้อมูลทั้งหมด q1 ไป q2 เพื่อให้ q2 มีลำดับข้อมูลตามที่ต้องการ
        while (!q1.isEmpty()) {
            q2.add(q1.remove());
        }
        
        // สลับ queue: ใฟ้ q2 กลายเป็น q1 เเละ q1 กลายเป็น q2
        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;
    }

    // เมธอดสำหรับนำข้อมูลออกจาก stack (คือข้อมูลบนสุด)
    public int pop() {
         // ถ้า q1 ว่าง (stack ว่าง) ให้เเสดงข้อความเเละคืนค่า -1 
        if (q1.isEmpty()) {
            System.out.println("ค่าว่างเปล่า");
            return -1;
        }
        // นำข้อมูลบนสุดออกจาก q1
        return q1.remove();
    }
    // เมธอดสำหรับดูข้อมูลบนสุดของ stack โดยไม่เอาออก
    public int top() {
        // ถ้า q1 ว่าง (stack ว่าง) ให้เเสดงข้อความเเละคืนค่า -1
        if (q1.isEmpty()) {
            System.out.println("ค่าว่างเปล่า");
            return -1;
        }
        // คืนคาข้อมูลบนสุดของ stack
        return q1.peek();
    }
    
    // เมธอดตรวจสอบว่า stack ว่างหรือไม่
    public boolean empty() {
        return q1.isEmpty();
    }
}

public class TestQueue {
    public static void main(String[] args) {
       // สร้าง stack โดยใช้ queue ที่เป็น linkedlist
        StackUsingQueueLL stack = new StackUsingQueueLL();
       
       // ใส่ข้อมูลลงใน stack
        stack.push(20);
        stack.push(10);
        stack.push(40);
        
        // ดูข้อมูลบนสุดของ stack 
        System.out.println(stack.top()); // เป็นการคาดหวังผลลัพธ์: 30
        
        // นำข้อมูลบนสุดออกจาก stack เเล้วดูข้อมูลบนสุดใหม่
        stack.pop();
        System.out.println(stack.top()); // เป็นการคาดหวังผลลัพธ์: 20
        
        // ทำซ้ำขั้นตอนเดิม
        stack.pop();
        System.out.println(stack.top()); // เป็นการคาดหวังผลลัพธ์: 10
        
        // นำข้อมูลสุดท้ายออกจาก stack ทำให้ stack ว่าง
        stack.pop();
    }
}
